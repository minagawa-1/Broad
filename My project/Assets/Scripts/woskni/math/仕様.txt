Fibonacci.cs
{
	メモ変数を用いて軽量化したフィボナッチ数を読み取るスクリプトです。
	プロジェクト内で使用された最大の数までメモに格納することで、次回の呼び出し時に高速で結果を返すことができます。

	Fibonacci:
		StoreFibonacciMemo関数を用いて引数番目のフィボナッチ数を返します。

	StoreFibonacciMemo:
		引数番目までメモに格納されていなければ最後尾の格納位置から追加で格納します。

	DebugLog:
		格納されたフィボナッチ数を昇順でデバッグログとして羅列します。
}

MathOther.cs
{
	IsPrime:
		引数の値が素数か否かを返します。
		2未満はfalse, 2はtrue, 3以上の偶数はfalseを先に返すことで軽量化を図っています。
		また、for文での走査をnの平方根までにすることで計算速度を実質的に倍加させています。

	 Mersenne:
		メルセンヌ数(2のn乗 - 1)を返します。
}

Stringer.cs
{
	いくつかの文字列を操作する関数が入っているスクリプトです。

	Camma:
		整数をカンマ区切りの文字列にします。
		たとえば引数に 1234567 を入れた場合、1,234,567 の文字列が返ります。

	FillFront:
		指定の桁数で文字埋めを行います。文字列の前に埋め込みます。
		たとえば引数に 16285, 0, 8 を入れると、00016285 の文字列が返ります。

	FillBack:
		指定の桁数で文字埋めを行います。文字列の後ろに埋め込みます。
		たとえば引数に "★★", "☆", 5 を入れると、★★☆☆☆ の文字列が返ります。
}